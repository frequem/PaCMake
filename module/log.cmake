include(CMakeParseArguments)

# pacmake_log_indent(INCREMENT|DECREMENT|RESET)
function(pacmake_log_indent mode)
	if(NOT PACMAKE_LOG_INDENTATION_LEVEL)
		set(PACMAKE_LOG_INDENTATION_LEVEL 0 CACHE INTERNAL "")
	endif()
		
	set(level ${PACMAKE_LOG_INDENTATION_LEVEL})
	if(mode STREQUAL "RESET")
		set(level 0)
	elseif(NOT mode OR mode STREQUAL "INCREMENT")
		math(EXPR level "${level} + 1")
	elseif(mode STREQUAL "DECREMENT")
		math(EXPR level "${level} - 1")
	else()
		message(FATAL_ERROR "PaCMake: pacmake_log_indent(${mode}): mode must be either INCREMENT, DECREMENT or RESET.")
	endif()
	
	if(${level} LESS 0)
		message(FATAL_ERROR "PaCMake: pacmake_log_indent(${mode}): Resulting indentation invalid.")
	endif()	
	set(PACMAKE_LOG_INDENTATION_LEVEL ${level} CACHE INTERNAL "")
endfunction()

# pacmake_log(messageString [INCREMENT|DECREMENT|RESET])
function(pacmake_log messageString)	
	if(NOT PACMAKE_LOG_INDENTATION_LEVEL)
		set(PACMAKE_LOG_INDENTATION_LEVEL 0 CACHE INTERNAL "")
	endif()
	
	set(indentationString "")
	set(i 0)
	while(${i} LESS ${PACMAKE_LOG_INDENTATION_LEVEL})
		math(EXPR i "${i} + 1")
		if(${i} LESS ${PACMAKE_LOG_INDENTATION_LEVEL})
			string(APPEND indentationString "│  ")
		else()
			string(APPEND indentationString "├─ ")
		endif()
	endwhile()
	
	set(prefixString "")
	if(${PACMAKE_LOG_INDENTATION_LEVEL} EQUAL 0)
		set(prefixString "PaCMake: ")
	endif()
	message(STATUS "${prefixString}${indentationString}${messageString}")
	
	
	cmake_parse_arguments(args "INCREMENT;DECREMENT;RESET" "" "" ${ARGN})
	set(mode "")
	if(args_INCREMENT)
		list(APPEND mode "INCREMENT")
	elseif(args_DECREMENT)
		list(APPEND mode "DECREMENT")
	elseif(args_RESET)
		list(APPEND mode "RESET")
	endif()
	string(REPLACE ";" " " mode "${mode}")
	
	if(mode)
		pacmake_log_indent(${mode})
	endif()
endfunction()
